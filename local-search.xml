<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前端面试基础知识总结（二）：CSS</title>
    <link href="/2022/04/18/front-end-interview-preparation-2/"/>
    <url>/2022/04/18/front-end-interview-preparation-2/</url>
    
    <content type="html"><![CDATA[<p>层叠样式表 (Cascading Style Sheets，缩写为 CSS），是一种样式表语言，用来描述 HTML 或 XML 文档的呈现。CSS 描述了在屏幕、纸质、音频等其它媒体上的元素应该如何被渲染的问题。</p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><img src="/img/front-end-interview-preparation/css-outline.png" alt="CSS知识点大纲"></p><h3 id="CSS-特性：值和单位"><a href="#CSS-特性：值和单位" class="headerlink" title="CSS 特性：值和单位"></a>CSS 特性：值和单位</h3><p><strong>长度</strong></p><p>px 表示的是 CSS 中的像素，是 CSS 中长度的绝对单位，是设备的相对单位。<br>设备像素比（DPR) &#x3D; 设备像素（Device pixels）数 &#x2F; CSS 像素数；</p><p>em、rem 都是 CSS 中的相对长度单位。rem 相对的是 HTML 的根元素 html 的 font-size。em 相对的是当前元素的 font-size。因为当前元素的 font-size 会继承父元素的，如果当前元素未指定 font-size，则相对的是父元素的 font-size。</p><p>vw 和 vh 分别是相对于屏幕视口宽度和高度而言的长度单位。1vw &#x3D; 视口宽度均分成 100 份中 1 份的长度。</p><h3 id="CSS-特性：CSS动画"><a href="#CSS-特性：CSS动画" class="headerlink" title="CSS 特性：CSS动画"></a>CSS 特性：CSS动画</h3><h4 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h4><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">animation</span>: name duration timing-function delay iteration-count direction;<br></code></pre></td></tr></table></figure><p>animation-name | 规定需要绑定到选择器的 keyframe 名称。</p><h4 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition</span>: property duration timing-function delay;<br></code></pre></td></tr></table></figure><p>transition-property | 规定设置过渡效果的 CSS 属性的名称。</p><h4 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h4><p>你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行</p><h4 id="动画优化"><a href="#动画优化" class="headerlink" title="动画优化"></a>动画优化</h4><ol><li><p>使用requestAnimationFrame替换setTimeout&#x2F;setInterval</p><p>requestAnimationFrame是在屏幕刷新后执行，避免掉帧。</p></li><li><p>CSS硬件加速</p><p>动画卡顿是在移动web开发时经常遇到的问题，解决这个问题一般会用到css3硬件加速。简单来说：通过GPU进行渲染，解放CPU。</p><p><code>transform</code>、<code>opacity</code>、<code>filter</code>可以触发</p></li><li><p>针对性优化：特定平台禁用动画</p><p><code>this.userClient = /Android/i.test(navigator.userAgent);</code></p></li><li><p>使用<code>will-change</code>通知浏览器你打算更改元素的属性，浏览器会在你进行更改之前做最合适的优化。</p></li><li><p>尽可能地使用基于css的动画，不仅仅更快，也不会被大量的js计算所阻塞。</p></li></ol><h3 id="布局：文档流"><a href="#布局：文档流" class="headerlink" title="布局：文档流"></a>布局：文档流</h3><p>文档流：会把内容按照从左到右、从上到下的顺序进行排列显示。</p><p>文档一旦脱流，计算其父节点高度时不会将其高度纳入，脱流节点不占据空间。如何脱离文档流？</p><ul><li>浮动元素</li><li>绝对定位</li></ul><h3 id="布局：块级上下文"><a href="#布局：块级上下文" class="headerlink" title="布局：块级上下文"></a>布局：块级上下文</h3><p>块格式化上下文（Block Formatting Context，BFC）是一个作用范围，独立的容器。</p><ul><li>容器里面的元素不会在布局上影响到外面的元素。</li><li>BFC 的区域不会与 float 盒子重叠。</li><li>内部的盒子会在垂直方向，一个接一个地放置</li><li>计算 BFC 的高度时，浮动元素也参与计算</li><li>属于同一个 BFC 的两个相邻盒子的 margin 会发生重叠</li></ul><h4 id="如何创建-BFC"><a href="#如何创建-BFC" class="headerlink" title="如何创建 BFC?"></a>如何创建 BFC?</h4><p>常见的有：</p><ul><li>根元素：html</li><li>浮动元素：float 属性不为 none</li><li>绝对定位元素：position 为 absolute 或 fixed</li><li>overflow 不为 visible 的元素</li><li>display 值为 flow-root 的元素</li><li>定义成块级的非块级元素：display: inline-block&#x2F;table-cell&#x2F;table-caption&#x2F;flex&#x2F;inline-flex&#x2F;grid&#x2F;inline-grid</li></ul><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ol><li>自适应两栏布局：BFC 的区域不会和浮动区域重叠，所以就可以把侧边栏固定宽度且左浮动，而对右侧内容触发 BFC，使得它的宽度自适应该行剩余宽度。</li><li>清除内部浮动：浮动造成的问题就是父元素高度坍塌，所以清除浮动需要解决的问题就是让父元素的高度恢复正常。而用 BFC 清除浮动的原理就是：计算 BFC 的高度时，浮动元素也参与计算。只要触发父元素的 BFC 即可。</li><li>防止垂直 margin 合并：BFC 渲染原理之一：同一个 BFC 下的垂直 margin 会发生合并。所以如果让 2 个元素不在同一个 BFC 中即可阻止垂直 margin 合并。</li></ol><h4 id="格式化上下文的分类"><a href="#格式化上下文的分类" class="headerlink" title="格式化上下文的分类"></a>格式化上下文的分类</h4><ul><li>BFC (Block Formatting Context) 块级格式化上下文；</li><li>IFC (Inline Formatting Context) 行内格式化上下文；</li><li>FFC (Flex Formatting Context) 弹性格式化上下文；</li><li>GFC (Grid Formatting Context) 格栅格式化上下文；</li></ul><h3 id="布局：层叠上下文"><a href="#布局：层叠上下文" class="headerlink" title="布局：层叠上下文"></a>布局：层叠上下文</h3><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context">MDN-层叠上下文</a></p><p>我们假定用户正面向（浏览器）视窗或网页，而 HTML 元素沿着其相对于用户的一条虚构的 z 轴排开，层叠上下文就是对这些 HTML 元素的一个三维构想。众 HTML 元素基于其元素属性按照优先级顺序占据这个空间。</p><h4 id="如何比较两个元素的层叠等级？"><a href="#如何比较两个元素的层叠等级？" class="headerlink" title="如何比较两个元素的层叠等级？"></a>如何比较两个元素的层叠等级？</h4><ol><li>先比较两个元素分别所处的层叠上下文的等级</li><li>如果在同一个层叠上下文中，再比较层叠顺序（见下图）</li><li>如果两个元素都在同一个层叠上下文，且层叠顺序相同，则在 HTML 中定义越后面的层叠等级越高。</li></ol><p><img src="/img/front-end-interview-preparation/the-stacking-context-1.png" alt="同一个层叠上下文中的层叠顺序"></p><h3 id="布局：position-属性"><a href="#布局：position-属性" class="headerlink" title="布局：position 属性"></a>布局：position 属性</h3><p>CSS<code>position</code>属性用于指定一个元素在文档中的定位方式。top，right，bottom 和 left 属性则决定了该元素的最终位置。</p><ul><li><code>static</code>：默认值。元素在文档常规流中当前的布局位置。</li><li><code>relative</code>：⽣成相对定位的元素，相对于其正常位置进⾏定位。</li><li><code>absolute</code>：⽣成绝对定位的元素，相对于<strong>static 定位以外的第一个父元素</strong>进行定位。</li><li><code>fixed</code>：⽣成绝对定位的元素，相对于浏览器窗⼝进⾏定位。</li><li><code>sticky</code>：粘性定位，基于浏览器的滚动位置变化，是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，之后为固定定位。须指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。</li></ul><h3 id="常见需求：1px-边框问题"><a href="#常见需求：1px-边框问题" class="headerlink" title="常见需求：1px 边框问题"></a>常见需求：1px 边框问题</h3><p>1px 问题指的是：在一些 Retina 屏幕的机型上，移动端页面的 1px 会变得很粗，呈现出不止 1px 的效果。是因为：<code>设备的物理像素 = window.devicePixelRatio * CSS像素</code>。</p><p>解决方案（以<code>devicePixelRatio = 2</code>为例）：</p><ul><li>伪元素 + transform 实现：利用伪元素 :after 重做 border ，并用 transform 的 scale 缩小一半</li><li>viewport 缩放：修改<code>initial-scale</code>等属性<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag">  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="常见需求：清除浮动"><a href="#常见需求：清除浮动" class="headerlink" title="常见需求：清除浮动"></a>常见需求：清除浮动</h3><p>为什么要清除浮动？</p><p>因为浮动元素会脱离正常的文档流，并不会占据文档流的位置，易造成<strong>父元素高度坍塌</strong>的问题。</p><p>解决方案：</p><ol><li>父级 div 定义 height</li><li>BFC 清除浮动：因为计算 BFC 高度的时候浮动子元素的高度也将计算在内，所以创建 BFC 即可（如父级 div 定义<code>overflow: hidden</code>）</li><li>父级 div 定义伪元素:after 和 zoom<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * For IE 6/7 only</span><br><span class="hljs-comment"> * Include this rule to trigger hasLayout and contain floats.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-class">.clearfix</span> &#123;<br>  *zoom: <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">clear</span>: both;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="常见需求：布局方案"><a href="#常见需求：布局方案" class="headerlink" title="常见需求：布局方案"></a>常见需求：布局方案</h3><p>参考：<a href="https://juejin.cn/post/6941206439624966152#heading-43">1.5 万字 CSS 基础拾遗（核心知识、常见需求）</a></p><h4 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h4><p>让元素在父元素中呈现出水平垂直居中的形态，无非就 3 种情况：</p><ol><li>单行的文本、inline 或者 inline-block 元素；<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.single-line</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>固定宽高的块级盒子<ul><li>绝对定位（absolute + calc）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.child</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li>不固定宽高的块级盒子<ul><li>绝对定位（absolute + transform）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.child</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>flex 布局<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>table-cell 布局<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">display</span>: table-cell;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><span class="hljs-selector-class">.child</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><p>实现垂直居中：</p><ul><li>视口的垂直居中可以使用 margin:50vh auto</li><li>使用绝对定位 top:50% 加载负 margin</li><li>绝对定位 top 加上 calc</li><li>绝对定位 加上 transform</li><li>使用 flex 布局</li></ul><p>实现水平居中：</p><ul><li>父元素使用 text-align:center，子元素为 inline&#x2F;inline-block</li><li>使用 margin:0 auto（对于块级元素，要定义宽度）</li><li>使用绝对定位</li></ul><h4 id="两栏布局：一边给定宽度，一边自适应"><a href="#两栏布局：一边给定宽度，一边自适应" class="headerlink" title="两栏布局：一边给定宽度，一边自适应"></a>两栏布局：一边给定宽度，一边自适应</h4><ol><li>使用 float，左栏 float:right 右栏 overflow: hidden;（BFC）</li><li>使用定位布局，左栏 position:absolute，右栏 margin-left:200px</li><li>使用 flex 布局，容器 display:flex，左栏定宽，右栏 flex:1</li><li>使用 grid 布局，容器 display:grid，grid-template-columns: 200px auto;</li></ol><h4 id="三栏布局：两边顶宽，中间自适应"><a href="#三栏布局：两边顶宽，中间自适应" class="headerlink" title="三栏布局：两边顶宽，中间自适应"></a>三栏布局：两边顶宽，中间自适应</h4><ol><li>圣杯布局<br>  为了中间div内容不被遮挡，将父元素设置了左右padding-left和padding-right后，将左右两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。可参考：<a href="https://codepen.io/canyzhou/pen/zYpbjXE?editors=1100">demo</a><br>  <img src="/img/front-end-interview-preparation/3-cols-layout-1.png" alt="圣杯布局"></li><li>双飞翼布局<br>  为了中间div内容不被遮挡，直接在中间div内部创建子div用于放置内容，在中间div里用margin-left和margin-right为左右两栏div留出位置。可参考：<a href="https://codepen.io/canyzhou/pen/mdpoKdY">demo</a><br>  <img src="/img/front-end-interview-preparation/3-cols-layout-2.png" alt="双飞翼布局"></li><li>float布局（BFC）</li><li>flex布局</li><li>grid布局  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.layout</span>&#123;<br>   <span class="hljs-attribute">display</span>: grid;<br>   <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">200px</span> auto <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h4><p>对于父元素：</p><ul><li><code>flex-direction</code> 主轴方向</li><li><code>flex-wrap</code> 排不下是否换行</li><li><code>flex-flow</code> flex-direction 和 flex-wrap 的简写形式</li><li><code>justify-content</code> 项目在主轴上的对齐方式<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">justify-content</span>: flex-start | flex-end | center | space-between |space-around; <br></code></pre></td></tr></table></figure></li><li><code>align-items</code> 项目在交叉轴上如何对齐<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;<br></code></pre></td></tr></table></figure></li><li><code>align-content</code> 多根轴线的对齐方式</li></ul><p>对于子元素：</p><ul><li><code>flex-grow</code> 定义项目的放大比例，默认值为0，不放大</li><li><code>flex-shrink</code> 定义了项目的缩小比例，默认为1，空间不足将缩小</li><li><code>flex-basis</code> 分配多余空间之前，项目占据的主轴空间，默认为auto，即项目的本来大小</li><li><code>flex</code> flex-grow，flex-shrink和flex-basis的简写，默认值为0 1 auto。后面两个属性可选</li><li><code>align-self</code> 允许单个项目有与其他项目不一样的对齐方式</li><li><code>order</code> 项目的排列顺序。数值越小，排列越靠前</li></ul><h4 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h4><p>Responsive design，意在实现不同屏幕分辨率的终端上浏览网页的不同展示方式。通过响应式设计能使网站在手机和平板电脑上有更好的浏览阅读体验。</p><p>方案：</p><ol><li>媒体查询 + rem （动态控制根元素font-size的大小）</li><li>flex弹性布局</li><li>百分比布局，如vw&#x2F;vh</li></ol><h2 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h2><h3 id="margin-0-auto-中auto的取值"><a href="#margin-0-auto-中auto的取值" class="headerlink" title="margin: 0 auto;中auto的取值"></a><code>margin: 0 auto;</code>中auto的取值</h3><p>想要水平居中某个元素时,可以设置<code>margin: 0 auto;</code></p><p>auto 的取值 ：</p><ul><li>当父元素的布局方式为 static&#x2F;relative 且<strong>宽高已知</strong>时：父元素剩余空间的宽度</li><li>当父元素的布局方式为 absolute&#x2F;fixed 或者 float&#x2F;inline 或者宽高未知时：0</li></ul><h3 id="CSS中的百分比是相对什么？"><a href="#CSS中的百分比是相对什么？" class="headerlink" title="CSS中的百分比是相对什么？"></a>CSS中的百分比是相对什么？</h3><p>元素百分比的计算值是通过元素的包含块（containing block）计算得到的。</p><blockquote><p>元素的尺寸及位置，常常会受它的包含块所影响。对于一些属性，例如 width, height, padding, margin，绝对定位元素的偏移值 （比如 position 被设置为 absolute 或 fixed），当我们对其赋予百分比值时，这些值的计算值，就是通过元素的包含块计算得来。<br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block">MDN: containing block</a></p></blockquote><ul><li>要计算<code>height</code>, <code>top</code> 及 <code>bottom</code> 中的百分值，是通过包含块的<code>height</code>的值。如果包含块的 height 值会根据它的内容变化，而且包含块的 position 属性的值被赋予 relative 或 static ，那么，这些值的计算值为<code>auto</code>。</li><li>要计算<code>width</code>, <code>left</code>, <code>right</code>, <code>padding</code>, <code>margin</code> 这些属性由包含块的<code>width</code>属性的值来计算它的百分值。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://juejin.cn/post/6941206439624966152#heading-0">1.5 万字 CSS 基础拾遗（核心知识、常见需求）</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/First_steps">MDN - 学习 CSS 第一步</a></li></ol><p>TODO:</p><ul><li><input disabled="" type="checkbox"> 圣杯和双飞翼布局写个demo</li><li><input disabled="" type="checkbox"> CSS动画的demo</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>interview</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端面试基础知识总结（一）：大纲、HTML</title>
    <link href="/2022/04/14/front-end-interview-preparation-1/"/>
    <url>/2022/04/14/front-end-interview-preparation-1/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我在去年春天时为了暑期实习做了很多准备，也参加了近30场技术面试，最终拿到了大厂的offer。之前准备的面经知识总结有些零碎，所以想重新整理一下，一方面自己在整理过程中可以重温知识点，另一方面如果未来被“毕业”了也可以掏出来复习。</p><h2 id="前端知识大纲"><a href="#前端知识大纲" class="headerlink" title="前端知识大纲"></a>前端知识大纲</h2><p>下图是我总结的面试常考知识点的大纲：</p><p><img src="/img/front-end-interview-preparation/fe-outline.png"></p><p>我把前端面试中常考核的内容分成七个模块：基础、框架、前端工程化、浏览器原理、计算机网络、算法与数据结构、服务器基础。其中基础固然是最重要的，HTML、CSS、JavaScript、Dom是每一个前端er必须掌握好的内容。CSS常考核的知识点都在上面的思维导图上来，HTML考核的频次较少。JavaScript会考核的较为细致，除了会问一些基础概念，也会出手写题或者让你看代码说输出结果。同时ES6（即ES2015）从2015年后每年都会出新版本，像Promise、Class类在实际生产中非常常用，也经常在面试中考核。</p><p>根据你简历上的技术栈，Vue和React框架一般择其一考察。基本面试官都会问你更熟悉哪个技术栈再考察该框架的知识点，所以尤其要深入准备一个框架，除了吃透API、生命周期的基本概念，还要去了解底层原理，如果能了解该框架最新的发展趋势就更好了。同时还需要了解框架通识，比如MVVM和MVC的区别，Virtual Dom是什么，Vue和React的区别和各自优势等。</p><p>计算机网络、数据结构和算法这俩算是计算机科班人都会的基础知识。当然前端也会考核，但不会那么难。考核的趋势是一年比一年难，所以还是要做好心理准备。算法题上LeetCode刷上100~200道题绝对够用了，同时还需要掌握手写JS题（手写Promise等）。至于设计模式和编程范式不一定会考核，但最好也有所了解。在计算机网络领域，前端面试就喜欢问跨域问题，一定要深入、再深入的准备。Web安全、HTTPS、TCPIP之类的都是老生常谈了。</p><p>浏览器原理主要考核浏览器渲染方面。经典面试题“输入一个url到地址栏，浏览器经历了哪些变化”出现频率之高令人咂舌，默默吐槽一下感觉每个公司面试都会问到！在前端工程化领域，面试官经常会考核webpack和性能优化，也会问你对前端工程化的理解，会对前端发展趋势的看法。服务器基础的知识属于加分项，会最好，不会问题也不大。主要NodeJs太常用了，不了解说不过去。</p><p>除了上述知识点，项目经历的考核也占据了面试的半壁江山。一般而言，如果你的项目经历越出众，面试官越会对你的项目更感兴趣，从而提问更长的时间。这时候你要做的就是好好复盘整个项目，并准备好与该项目技术栈相关的发散性的各方面知识点。正所谓，不需要面面俱到，但要深入一二。</p><h1 id="基础：HTML"><a href="#基础：HTML" class="headerlink" title="基础：HTML"></a>基础：HTML</h1><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><img src="/img/front-end-interview-preparation/HTML-outline.png"></p><h3 id="HTML是什么？"><a href="#HTML是什么？" class="headerlink" title="HTML是什么？"></a>HTML是什么？</h3><p>超文本标记语言 (英语：Hypertext Markup Language，简称：HTML ) 是一种用来结构化 Web 网页及其内容的标记语言。</p><h3 id="HTML版本"><a href="#HTML版本" class="headerlink" title="HTML版本"></a>HTML版本</h3><ul><li>HTML4：标签可以不结束</li><li>HTML5：新增内容</li><li>XHTML<ul><li>目的是传输和存储数据，而不是描述数据</li><li>比HTML更严格：标签必须结束，属性必须带引号，属性必须有值，标签属性必须有值</li></ul></li></ul><h3 id="HTML元素分类"><a href="#HTML元素分类" class="headerlink" title="HTML元素分类"></a>HTML元素分类</h3><ul><li>块级元素block（方块形状，占据一整行）：div ul ol li dl dt dd h1~h5 p</li><li>行内元素inline(一行中的某个位置)：a b span img input select strong</li><li>inline-block(行内，有宽高属性)：selection</li><li>空元素: br、meta、hr、link、input、img</li></ul><p>嵌套关系：</p><ul><li>块级元素可以包含行内元素</li><li>块级元素不一定能包含块级元素(p标签不能包含div标签)</li><li>行内元素“一般”不能包含块级元素（a包含div是可以的）</li></ul><h3 id="HTML5新增内容"><a href="#HTML5新增内容" class="headerlink" title="HTML5新增内容"></a>HTML5新增内容</h3><ol><li>更好的语义化标签<blockquote><p><code>&lt;section&gt;</code>用于对网站和页面内容分块，划分单独的模块区域<br><code>&lt;article&gt;</code>独立的文章展示<br><code>&lt;aside&gt;</code>页面中的附属侧边信息<br><code>&lt;header&gt;</code>定义页面或内容的头部区域<br><code>&lt;footer&gt;</code>定义页面或内容的底部区域<br><code>&lt;nav&gt;</code>定义页面导航<br><code>&lt;figure&gt;</code>表示一个独立的内容</p></blockquote></li></ol><ul><li>作用：1.利于SEO 2.增强代码可读性</li></ul><ol start="2"><li>Web Workers：运行在后台的 JavaScript，实现多线程</li><li>应用缓存：通过创建manifest 文件，可以轻松地创建 web 应用的离线版本</li><li>requestAnimationFrame：保证回调函数在屏幕每一次的刷新建个中只执行一次，动画不掉帧</li><li>增加了canvas，拖放api，地理定位Geolocatio…</li></ol><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="Doctype作⽤-严格模式与混杂模式如何区分？它们有何意义"><a href="#Doctype作⽤-严格模式与混杂模式如何区分？它们有何意义" class="headerlink" title="Doctype作⽤? 严格模式与混杂模式如何区分？它们有何意义?"></a>Doctype作⽤? 严格模式与混杂模式如何区分？它们有何意义?</h3><p><code>&lt;!DOCTYPE&gt;</code>声明位于位于HTML文档中的第一行，处于<code>&lt;html&gt;</code>标签之前。告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现。</p><ul><li><p>严格模式：排版和JS运作模式都是以该浏览器支持的最高标准运行。</p></li><li><p>混杂模式(兼容模式)：页面以宽松的向后兼容的方式显示, 模拟老式浏览器的行为以防止站点无法工作。</p></li></ul><h3 id="HTML全局属性-global-attribute-有哪些？"><a href="#HTML全局属性-global-attribute-有哪些？" class="headerlink" title="HTML全局属性(global attribute)有哪些？"></a>HTML全局属性(global attribute)有哪些？</h3><p>全局属性可用于任何 HTML 元素:</p><ul><li><code>class</code>：为元素设置类标识</li><li><code>id</code> id标识符</li><li><code>draggable</code>: 是否可拖拽</li><li><code>data-*</code>： 为元素增加⾃定义属性</li><li><code>style</code> 行内元素</li></ul><h3 id="为什么script标签在body底部，style标签在head上？"><a href="#为什么script标签在body底部，style标签在head上？" class="headerlink" title="为什么script标签在body底部，style标签在head上？"></a>为什么script标签在body底部，style标签在head上？</h3><p>浏览器解析HTML文档是自上而下的，遇到默认的<code>&lt;script&gt;</code>标签，会导致浏览器必须先加载并执行脚本，之后才能继续解析。对于那些需要很多JavaScript代码的页面来说，这无疑会导致浏览器在呈现页面时出现明显的延迟，而延迟期间的浏览器窗口中将是一片空白。</p><p>同理浏览器解析HTML文档是自上而下的，这样<code>&lt;style&gt;</code>标签里的样式就会作用到body里的元素上。如果<code>&lt;style&gt;</code>标签写在<code>&lt;body&gt;</code>标签下面，在这之前的元素的样式就不会生效，会导致页面结构出来了，而CSS还没开始渲染。</p><p><code>&lt;style&gt;</code>标签还有两个属性：</p><p><code>async</code>属性:</p><ol><li>对于普通脚本，如果存在 async 属性，那么普通脚本会被并行请求，<strong>并尽快解析和执行</strong>。</li><li>对于模块脚本，如果存在 async 属性，那么脚本及其所有依赖都会在延缓队列中执行，因此它们会被并行请求，并尽快解析和执行。</li></ol><p><code>defer</code>属性:</p><ol><li>并行请求，将在文档完成解析后，<strong>触发 DOMContentLoaded 事件前执行</strong>。</li><li>对模块脚本没有作用 —— 他们默认 defer</li></ol><p><em>TBC.</em></p>]]></content>
    
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>interview</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
